
// Google Gemini API integration utility
// Note: In production, the API key should be stored securely on the backend

const GEMINI_API_KEY = 'AIzaSyAE5FLtFYjCFLHonUVoHY9htSY5AucS48U';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';

export interface TaskGenerationRequest {
  input: string;
  inputType: 'concept' | 'transcript';
  skillLevel?: 'beginner' | 'intermediate' | 'advanced';
  userPreferences?: string[];
}

export interface GeneratedTask {
  id: string;
  title: string;
  description: string;
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';
  estimatedTime: string;
  type: 'Reading' | 'Exercise' | 'Project' | 'Quiz';
  resources?: string[];
  prerequisites?: string[];
}

export class GeminiApiService {
  private static createPrompt(request: TaskGenerationRequest): string {
    const { input, inputType, skillLevel = 'beginner' } = request;
    
    return `
      Act as an expert educational content creator. Based on the following ${inputType}, generate 3-5 personalized learning tasks.
      
      ${inputType === 'concept' ? 'Concept:' : 'Lecture Transcript:'} ${input}
      
      User Skill Level: ${skillLevel}
      
      For each task, provide:
      1. A clear, engaging title
      2. A detailed description (2-3 sentences)
      3. Difficulty level (Beginner/Intermediate/Advanced)
      4. Estimated completion time
      5. Task type (Reading/Exercise/Project/Quiz)
      
      Make tasks progressive, building upon each other. Ensure they are:
      - Engaging and practical
      - Appropriate for the ${skillLevel} level
      - Varied in type and approach
      - Focused on active learning
      
      Return the response as a JSON array of task objects with the fields: title, description, difficulty, estimatedTime, type.
    `;
  }

  static async generateTasks(request: TaskGenerationRequest): Promise<GeneratedTask[]> {
    try {
      console.log('Generating tasks with Gemini API for:', request.input);
      
      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: this.createPrompt(request)
            }]
          }]
        })
      });

      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();
      console.log('Gemini API response:', data);

      // Extract the generated text from the response
      const generatedText = data.candidates?.[0]?.content?.parts?.[0]?.text;
      
      if (!generatedText) {
        throw new Error('No content generated by Gemini API');
      }

      // Try to parse the JSON response
      try {
        // Extract JSON from the response (handle cases where it might be wrapped in markdown)
        const jsonMatch = generatedText.match(/\[[\s\S]*\]/);
        if (!jsonMatch) {
          throw new Error('No JSON array found in response');
        }
        
        const tasks = JSON.parse(jsonMatch[0]);
        
        // Add unique IDs to tasks
        return tasks.map((task: any, index: number) => ({
          ...task,
          id: `task_${Date.now()}_${index}`
        }));
      } catch (parseError) {
        console.error('Failed to parse Gemini response as JSON:', parseError);
        
        // Fallback: create tasks from text response
        return this.createFallbackTasks(request.input, generatedText);
      }
    } catch (error) {
      console.error('Error calling Gemini API:', error);
      throw error;
    }
  }

  private static createFallbackTasks(input: string, responseText: string): GeneratedTask[] {
    // Create fallback tasks if JSON parsing fails
    return [
      {
        id: `fallback_${Date.now()}_1`,
        title: `Introduction to ${input}`,
        description: `Learn the fundamental concepts and principles of ${input} through guided reading and exploration.`,
        difficulty: 'Beginner' as const,
        estimatedTime: '15-20 minutes',
        type: 'Reading' as const
      },
      {
        id: `fallback_${Date.now()}_2`,
        title: `Hands-on Practice with ${input}`,
        description: `Apply your knowledge through practical exercises and real-world scenarios.`,
        difficulty: 'Intermediate' as const,
        estimatedTime: '30-45 minutes',
        type: 'Exercise' as const
      },
      {
        id: `fallback_${Date.now()}_3`,
        title: `Mastering ${input}`,
        description: `Demonstrate your understanding through a comprehensive project or assessment.`,
        difficulty: 'Advanced' as const,
        estimatedTime: '60+ minutes',
        type: 'Project' as const
      }
    ];
  }

  static async generateAdaptiveFeedback(
    taskId: string,
    userFeedback: { rating: number; comments?: string },
    userProfile: any
  ): Promise<string> {
    const prompt = `
      Based on the following user feedback and profile, provide suggestions for improving future task recommendations:
      
      Task ID: ${taskId}
      User Rating: ${userFeedback.rating}/5
      User Comments: ${userFeedback.comments || 'No comments'}
      User Profile: ${JSON.stringify(userProfile)}
      
      Provide specific, actionable suggestions for:
      1. Adjusting task difficulty
      2. Improving task relevance
      3. Better personalization strategies
      
      Keep the response concise and focused.
    `;

    try {
      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [{
            parts: [{
              text: prompt
            }]
          }]
        })
      });

      const data = await response.json();
      return data.candidates?.[0]?.content?.parts?.[0]?.text || 'No feedback suggestions generated';
    } catch (error) {
      console.error('Error generating adaptive feedback:', error);
      return 'Unable to generate feedback suggestions at this time';
    }
  }
}
